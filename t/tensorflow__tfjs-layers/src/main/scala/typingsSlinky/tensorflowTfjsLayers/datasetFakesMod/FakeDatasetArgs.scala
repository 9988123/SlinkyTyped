package typingsSlinky.tensorflowTfjsLayers.datasetFakesMod

import org.scalablytyped.runtime.StringDictionary
import typingsSlinky.tensorflowTfjsCore.distTypesMod.Rank
import typingsSlinky.tensorflowTfjsCore.tensorMod.Tensor
import typingsSlinky.tensorflowTfjsLayers.kerasFormatCommonMod.Shape
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait FakeDatasetArgs extends js.Object {
  /**
    * The size of each batch generated by the iterator.
    */
  var batchSize: Double = js.native
  /**
    * The number of batches an iterator generates before declaring done to be
    * true.
    */
  var numBatches: Double = js.native
  /**
    * The shape(s) of the features of a single example.
    *
    * Use an object mapping name to shape, if more than one feature tensors
    * are required.
    */
  var xShape: Shape | StringDictionary[Shape] = js.native
  /**
    * A function that generates preset sequence of X tensors.
    *
    * This function is invoked each time a new iterator is created.
    */
  var xTensorsFunc: js.UndefOr[js.Function0[js.Array[Tensor[Rank]] | StringDictionary[js.Array[Tensor[Rank]]]]] = js.native
  /**
    * The shape of the target(s) of a single exapmle.
    */
  var yShape: Shape | StringDictionary[Shape] = js.native
  /**
    * A function that generates preset sequence of Y tensors.
    *
    * This function is invoked each time a new iterator is created.
    */
  var yTensorsFunc: js.UndefOr[js.Function0[js.Array[Tensor[Rank]] | StringDictionary[js.Array[Tensor[Rank]]]]] = js.native
}

object FakeDatasetArgs {
  @scala.inline
  def apply(
    batchSize: Double,
    numBatches: Double,
    xShape: Shape | StringDictionary[Shape],
    yShape: Shape | StringDictionary[Shape]
  ): FakeDatasetArgs = {
    val __obj = js.Dynamic.literal(batchSize = batchSize.asInstanceOf[js.Any], numBatches = numBatches.asInstanceOf[js.Any], xShape = xShape.asInstanceOf[js.Any], yShape = yShape.asInstanceOf[js.Any])
    __obj.asInstanceOf[FakeDatasetArgs]
  }
  @scala.inline
  implicit class FakeDatasetArgsOps[Self <: FakeDatasetArgs] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withBatchSize(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("batchSize")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withNumBatches(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("numBatches")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withXShape(value: Shape | StringDictionary[Shape]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("xShape")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withYShape(value: Shape | StringDictionary[Shape]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("yShape")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withXTensorsFunc(value: () => js.Array[Tensor[Rank]] | StringDictionary[js.Array[Tensor[Rank]]]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("xTensorsFunc")(js.Any.fromFunction0(value))
        ret
    }
    @scala.inline
    def withoutXTensorsFunc: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("xTensorsFunc")(js.undefined)
        ret
    }
    @scala.inline
    def withYTensorsFunc(value: () => js.Array[Tensor[Rank]] | StringDictionary[js.Array[Tensor[Rank]]]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("yTensorsFunc")(js.Any.fromFunction0(value))
        ret
    }
    @scala.inline
    def withoutYTensorsFunc: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("yTensorsFunc")(js.undefined)
        ret
    }
  }
  
}

