package typingsSlinky.gapiClientAndroidmanagement.gapi.client.androidmanagement

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait Enterprise extends js.Object {
  /**
    * Whether app auto-approval is enabled. When enabled, apps installed via policy for this enterprise have all permissions automatically approved. When
    * enabled, it is the caller's responsibility to display the permissions required by an app to the enterprise admin before setting the app to be installed
    * in a policy.
    */
  var appAutoApprovalEnabled: js.UndefOr[Boolean] = js.native
  /** The notification types to enable via Google Cloud Pub/Sub. */
  var enabledNotificationTypes: js.UndefOr[js.Array[String]] = js.native
  /** The name of the enterprise as it will appear to users. */
  var enterpriseDisplayName: js.UndefOr[String] = js.native
  /**
    * An image displayed as a logo during device provisioning. Supported types are: image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/webp,
    * image/vnd.wap.wbmp, image/x-adobe-dng.
    */
  var logo: js.UndefOr[ExternalData] = js.native
  /** The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId} */
  var name: js.UndefOr[String] = js.native
  /**
    * A color in RGB format indicating the predominant color to display in the device management app UI. The color components are stored as follows: (red <<
    * 16) | (green << 8) | blue, where each component may take a value between 0 and 255 inclusive.
    */
  var primaryColor: js.UndefOr[Double] = js.native
  /**
    * When Cloud Pub/Sub notifications are enabled, this field is required to indicate the topic to which the notifications will be published. The format of
    * this field is projects/{project}/topics/{topic}. You must have granted the publish permission on this topic to
    * android-cloud-policy@system.gserviceaccount.com
    */
  var pubsubTopic: js.UndefOr[String] = js.native
}

object Enterprise {
  @scala.inline
  def apply(): Enterprise = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Enterprise]
  }
  @scala.inline
  implicit class EnterpriseOps[Self <: Enterprise] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withAppAutoApprovalEnabled(value: Boolean): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("appAutoApprovalEnabled")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutAppAutoApprovalEnabled: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("appAutoApprovalEnabled")(js.undefined)
        ret
    }
    @scala.inline
    def withEnabledNotificationTypes(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("enabledNotificationTypes")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutEnabledNotificationTypes: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("enabledNotificationTypes")(js.undefined)
        ret
    }
    @scala.inline
    def withEnterpriseDisplayName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("enterpriseDisplayName")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutEnterpriseDisplayName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("enterpriseDisplayName")(js.undefined)
        ret
    }
    @scala.inline
    def withLogo(value: ExternalData): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("logo")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLogo: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("logo")(js.undefined)
        ret
    }
    @scala.inline
    def withName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(js.undefined)
        ret
    }
    @scala.inline
    def withPrimaryColor(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("primaryColor")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPrimaryColor: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("primaryColor")(js.undefined)
        ret
    }
    @scala.inline
    def withPubsubTopic(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("pubsubTopic")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPubsubTopic: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("pubsubTopic")(js.undefined)
        ret
    }
  }
  
}

