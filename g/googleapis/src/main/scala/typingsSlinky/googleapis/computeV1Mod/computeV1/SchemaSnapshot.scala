package typingsSlinky.googleapis.computeV1Mod.computeV1

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A persistent disk snapshot resource. (== resource_for beta.snapshots ==)
  * (== resource_for v1.snapshots ==)
  */
@js.native
trait SchemaSnapshot extends js.Object {
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * [Output Only] Size of the snapshot, specified in GB.
    */
  var diskSizeGb: js.UndefOr[String] = js.native
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * [Output Only] Type of the resource. Always compute#snapshot for Snapshot
    * resources.
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * A fingerprint for the labels being applied to this snapshot, which is
    * essentially a hash of the labels set used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make a get() request to retrieve a snapshot.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  /**
    * Labels to apply to this snapshot. These can be later modified by the
    * setLabels method. Label values may be empty.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * [Output Only] Integer license codes indicating which licenses are
    * attached to this snapshot.
    */
  var licenseCodes: js.UndefOr[js.Array[String]] = js.native
  /**
    * [Output Only] A list of public visible licenses that apply to this
    * snapshot. This can be because the original image had licenses attached
    * (such as a Windows image).
    */
  var licenses: js.UndefOr[js.Array[String]] = js.native
  /**
    * Name of the resource; provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * Encrypts the snapshot using a customer-supplied encryption key.  After
    * you encrypt a snapshot using a customer-supplied key, you must provide
    * the same key if you use the image later For example, you must provide the
    * encryption key when you create a disk from the encrypted snapshot in a
    * future request.  Customer-supplied encryption keys do not protect access
    * to metadata of the disk.  If you do not provide an encryption key when
    * creating the snapshot, then the snapshot will be encrypted using an
    * automatically generated key and you do not need to provide a key to use
    * the snapshot later.
    */
  var snapshotEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The source disk used to create this snapshot.
    */
  var sourceDisk: js.UndefOr[String] = js.native
  /**
    * The customer-supplied encryption key of the source disk. Required if the
    * source disk is protected by a customer-supplied encryption key.
    */
  var sourceDiskEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The ID value of the disk used to create this snapshot. This
    * value may be used to determine whether the snapshot was taken from the
    * current or a previous instance of a given disk name.
    */
  var sourceDiskId: js.UndefOr[String] = js.native
  /**
    * [Output Only] The status of the snapshot. This can be CREATING, DELETING,
    * FAILED, READY, or UPLOADING.
    */
  var status: js.UndefOr[String] = js.native
  /**
    * [Output Only] A size of the storage used by the snapshot. As snapshots
    * share storage, this number is expected to change with snapshot
    * creation/deletion.
    */
  var storageBytes: js.UndefOr[String] = js.native
  /**
    * [Output Only] An indicator whether storageBytes is in a stable state or
    * it is being adjusted as a result of shared storage reallocation. This
    * status can either be UPDATING, meaning the size of the snapshot is being
    * updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
    */
  var storageBytesStatus: js.UndefOr[String] = js.native
  /**
    * GCS bucket storage location of the snapshot (regional or multi-regional).
    */
  var storageLocations: js.UndefOr[js.Array[String]] = js.native
}

object SchemaSnapshot {
  @scala.inline
  def apply(): SchemaSnapshot = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaSnapshot]
  }
  @scala.inline
  implicit class SchemaSnapshotOps[Self <: SchemaSnapshot] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withCreationTimestamp(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("creationTimestamp")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCreationTimestamp: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("creationTimestamp")(js.undefined)
        ret
    }
    @scala.inline
    def withDescription(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDescription: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(js.undefined)
        ret
    }
    @scala.inline
    def withDiskSizeGb(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("diskSizeGb")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDiskSizeGb: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("diskSizeGb")(js.undefined)
        ret
    }
    @scala.inline
    def withId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(js.undefined)
        ret
    }
    @scala.inline
    def withKind(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("kind")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutKind: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("kind")(js.undefined)
        ret
    }
    @scala.inline
    def withLabelFingerprint(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labelFingerprint")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLabelFingerprint: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labelFingerprint")(js.undefined)
        ret
    }
    @scala.inline
    def withLabels(value: StringDictionary[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLabels: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(js.undefined)
        ret
    }
    @scala.inline
    def withLicenseCodes(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("licenseCodes")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLicenseCodes: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("licenseCodes")(js.undefined)
        ret
    }
    @scala.inline
    def withLicenses(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("licenses")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLicenses: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("licenses")(js.undefined)
        ret
    }
    @scala.inline
    def withName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(js.undefined)
        ret
    }
    @scala.inline
    def withSelfLink(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("selfLink")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSelfLink: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("selfLink")(js.undefined)
        ret
    }
    @scala.inline
    def withSnapshotEncryptionKey(value: SchemaCustomerEncryptionKey): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("snapshotEncryptionKey")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSnapshotEncryptionKey: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("snapshotEncryptionKey")(js.undefined)
        ret
    }
    @scala.inline
    def withSourceDisk(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sourceDisk")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSourceDisk: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sourceDisk")(js.undefined)
        ret
    }
    @scala.inline
    def withSourceDiskEncryptionKey(value: SchemaCustomerEncryptionKey): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sourceDiskEncryptionKey")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSourceDiskEncryptionKey: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sourceDiskEncryptionKey")(js.undefined)
        ret
    }
    @scala.inline
    def withSourceDiskId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sourceDiskId")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSourceDiskId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sourceDiskId")(js.undefined)
        ret
    }
    @scala.inline
    def withStatus(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("status")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutStatus: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("status")(js.undefined)
        ret
    }
    @scala.inline
    def withStorageBytes(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("storageBytes")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutStorageBytes: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("storageBytes")(js.undefined)
        ret
    }
    @scala.inline
    def withStorageBytesStatus(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("storageBytesStatus")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutStorageBytesStatus: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("storageBytesStatus")(js.undefined)
        ret
    }
    @scala.inline
    def withStorageLocations(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("storageLocations")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutStorageLocations: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("storageLocations")(js.undefined)
        ret
    }
  }
  
}

