package typingsSlinky.googleapis.replicapoolV1beta1Mod.replicapoolV1beta1

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait SchemaPool extends js.Object {
  /**
    * Whether replicas in this pool should be restarted if they experience a
    * failure. The default value is true.
    */
  var autoRestart: js.UndefOr[Boolean] = js.native
  /**
    * The base instance name to use for the replicas in this pool. This must
    * match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances
    * in this replica pool will be named in the format
    * &lt;base-instance-name&gt;-&lt;ID&gt;. The &lt;ID&gt; postfix will be a
    * four character alphanumeric identifier generated by the service.  If this
    * is not specified by the user, a random base instance name is generated by
    * the service.
    */
  var baseInstanceName: js.UndefOr[String] = js.native
  /**
    * [Output Only] The current number of replicas in the pool.
    */
  var currentNumReplicas: js.UndefOr[Double] = js.native
  /**
    * An optional description of the replica pool.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * Deprecated. Please use template[].healthChecks instead.
    */
  var healthChecks: js.UndefOr[js.Array[SchemaHealthCheck]] = js.native
  /**
    * The initial number of replicas this pool should have. You must provide a
    * value greater than or equal to 0.
    */
  var initialNumReplicas: js.UndefOr[Double] = js.native
  /**
    * A list of labels to attach to this replica pool and all created virtual
    * machines in this replica pool.
    */
  var labels: js.UndefOr[js.Array[SchemaLabel]] = js.native
  /**
    * The name of the replica pool. Must follow the regex
    * [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * Deprecated! Use initial_num_replicas instead.
    */
  var numReplicas: js.UndefOr[Double] = js.native
  /**
    * The list of resource views that should be updated with all the replicas
    * that are managed by this pool.
    */
  var resourceViews: js.UndefOr[js.Array[String]] = js.native
  /**
    * [Output Only] A self-link to the replica pool.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * Deprecated, please use target_pools instead.
    */
  var targetPool: js.UndefOr[String] = js.native
  /**
    * A list of target pools to update with the replicas that are managed by
    * this pool. If specified, the replicas in this replica pool will be added
    * to the specified target pools for load balancing purposes. The replica
    * pool must live in the same region as the specified target pools. These
    * values must be the target pool resource names, and not fully qualified
    * URLs.
    */
  var targetPools: js.UndefOr[js.Array[String]] = js.native
  /**
    * The template to use when creating replicas in this pool. This template is
    * used during initial instance creation of the pool, when growing the pool
    * in size, or when a replica restarts.
    */
  var template: js.UndefOr[SchemaTemplate] = js.native
  /**
    * Deprecated! Do not set.
    */
  var `type`: js.UndefOr[String] = js.native
}

object SchemaPool {
  @scala.inline
  def apply(): SchemaPool = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaPool]
  }
  @scala.inline
  implicit class SchemaPoolOps[Self <: SchemaPool] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withAutoRestart(value: Boolean): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("autoRestart")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutAutoRestart: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("autoRestart")(js.undefined)
        ret
    }
    @scala.inline
    def withBaseInstanceName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("baseInstanceName")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutBaseInstanceName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("baseInstanceName")(js.undefined)
        ret
    }
    @scala.inline
    def withCurrentNumReplicas(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("currentNumReplicas")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCurrentNumReplicas: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("currentNumReplicas")(js.undefined)
        ret
    }
    @scala.inline
    def withDescription(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDescription: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(js.undefined)
        ret
    }
    @scala.inline
    def withHealthChecks(value: js.Array[SchemaHealthCheck]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("healthChecks")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutHealthChecks: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("healthChecks")(js.undefined)
        ret
    }
    @scala.inline
    def withInitialNumReplicas(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("initialNumReplicas")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutInitialNumReplicas: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("initialNumReplicas")(js.undefined)
        ret
    }
    @scala.inline
    def withLabels(value: js.Array[SchemaLabel]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLabels: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(js.undefined)
        ret
    }
    @scala.inline
    def withName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(js.undefined)
        ret
    }
    @scala.inline
    def withNumReplicas(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("numReplicas")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutNumReplicas: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("numReplicas")(js.undefined)
        ret
    }
    @scala.inline
    def withResourceViews(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("resourceViews")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutResourceViews: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("resourceViews")(js.undefined)
        ret
    }
    @scala.inline
    def withSelfLink(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("selfLink")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSelfLink: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("selfLink")(js.undefined)
        ret
    }
    @scala.inline
    def withTargetPool(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("targetPool")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutTargetPool: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("targetPool")(js.undefined)
        ret
    }
    @scala.inline
    def withTargetPools(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("targetPools")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutTargetPools: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("targetPools")(js.undefined)
        ret
    }
    @scala.inline
    def withTemplate(value: SchemaTemplate): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("template")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutTemplate: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("template")(js.undefined)
        ret
    }
    @scala.inline
    def withType(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("type")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutType: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("type")(js.undefined)
        ret
    }
  }
  
}

