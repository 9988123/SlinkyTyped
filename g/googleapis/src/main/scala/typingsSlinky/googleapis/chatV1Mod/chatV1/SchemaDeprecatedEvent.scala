package typingsSlinky.googleapis.chatV1Mod.chatV1

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * Hangouts Chat events.
  */
@js.native
trait SchemaDeprecatedEvent extends js.Object {
  /**
    * The form action data associated with an interactive card that was
    * clicked. Only populated for CARD_CLICKED events. See the [Interactive
    * Cards guide](/hangouts/chat/how-tos/cards-onclick) for more information.
    */
  var action: js.UndefOr[SchemaFormAction] = js.native
  /**
    * The URL the bot should redirect the user to after they have completed an
    * authorization or configuration flow outside of Hangouts Chat. See the
    * [Authorizing access to 3p services guide](/hangouts/chat/how-tos/auth-3p)
    * for more information.
    */
  var configCompleteRedirectUrl: js.UndefOr[String] = js.native
  /**
    * The timestamp indicating when the event was dispatched.
    */
  var eventTime: js.UndefOr[String] = js.native
  /**
    * The message that triggered the event, if applicable.
    */
  var message: js.UndefOr[SchemaMessage] = js.native
  /**
    * The room or DM in which the event occurred.
    */
  var space: js.UndefOr[SchemaSpace] = js.native
  /**
    * The bot-defined key for the thread related to the event. See the
    * thread_key field of the `spaces.message.create` request for more
    * information.
    */
  var threadKey: js.UndefOr[String] = js.native
  /**
    * A secret value that bots can use to verify if a request is from Google.
    * The token is randomly generated by Google, remains static, and can be
    * obtained from the Hangouts Chat API configuration page in the Cloud
    * Console. Developers can revoke/regenerate it if needed from the same
    * page.
    */
  var token: js.UndefOr[String] = js.native
  /**
    * The type of the event.
    */
  var `type`: js.UndefOr[String] = js.native
  /**
    * The user that triggered the event.
    */
  var user: js.UndefOr[SchemaUser] = js.native
}

object SchemaDeprecatedEvent {
  @scala.inline
  def apply(): SchemaDeprecatedEvent = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaDeprecatedEvent]
  }
  @scala.inline
  implicit class SchemaDeprecatedEventOps[Self <: SchemaDeprecatedEvent] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withAction(value: SchemaFormAction): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("action")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutAction: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("action")(js.undefined)
        ret
    }
    @scala.inline
    def withConfigCompleteRedirectUrl(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("configCompleteRedirectUrl")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutConfigCompleteRedirectUrl: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("configCompleteRedirectUrl")(js.undefined)
        ret
    }
    @scala.inline
    def withEventTime(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("eventTime")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutEventTime: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("eventTime")(js.undefined)
        ret
    }
    @scala.inline
    def withMessage(value: SchemaMessage): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("message")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutMessage: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("message")(js.undefined)
        ret
    }
    @scala.inline
    def withSpace(value: SchemaSpace): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("space")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSpace: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("space")(js.undefined)
        ret
    }
    @scala.inline
    def withThreadKey(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("threadKey")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutThreadKey: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("threadKey")(js.undefined)
        ret
    }
    @scala.inline
    def withToken(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("token")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutToken: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("token")(js.undefined)
        ret
    }
    @scala.inline
    def withType(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("type")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutType: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("type")(js.undefined)
        ret
    }
    @scala.inline
    def withUser(value: SchemaUser): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("user")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutUser: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("user")(js.undefined)
        ret
    }
  }
  
}

