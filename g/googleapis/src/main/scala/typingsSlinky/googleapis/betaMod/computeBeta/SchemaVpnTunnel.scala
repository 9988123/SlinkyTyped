package typingsSlinky.googleapis.betaMod.computeBeta

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * VPN tunnel resource. (== resource_for beta.vpnTunnels ==) (== resource_for
  * v1.vpnTunnels ==)
  */
@js.native
trait SchemaVpnTunnel extends js.Object {
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * [Output Only] Detailed status message for the VPN tunnel.
    */
  var detailedStatus: js.UndefOr[String] = js.native
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * IKE protocol version to use when establishing the VPN tunnel with the
    * peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version
    * is 2.
    */
  var ikeVersion: js.UndefOr[Double] = js.native
  /**
    * [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * A fingerprint for the labels being applied to this VpnTunnel, which is
    * essentially a hash of the labels set used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make a get() request to retrieve a VpnTunnel.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  /**
    * Labels to apply to this VpnTunnel. These can be later modified by the
    * setLabels method. Each label key/value pair must comply with RFC1035.
    * Label values may be empty.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * Local traffic selector to use when establishing the VPN tunnel with the
    * peer VPN gateway. The value should be a CIDR formatted string, for
    * example: 192.168.0.0/16. The ranges must be disjoint. Only IPv4 is
    * supported.
    */
  var localTrafficSelector: js.UndefOr[js.Array[String]] = js.native
  /**
    * Name of the resource. Provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * URL of the peer side external VPN gateway to which this VPN tunnel is
    * connected. Provided by the client when the VPN tunnel is created. This
    * field is exclusive with the field peerGcpGateway.
    */
  var peerExternalGateway: js.UndefOr[String] = js.native
  /**
    * The interface ID of the external VPN gateway to which this VPN tunnel is
    * connected. Provided by the client when the VPN tunnel is created.
    */
  var peerExternalGatewayInterface: js.UndefOr[Double] = js.native
  /**
    * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is
    * connected. Provided by the client when the VPN tunnel is created. This
    * field can be used when creating highly available VPN from VPC network to
    * VPC network, the field is exclusive with the field peerExternalGateway.
    * If provided, the VPN tunnel will automatically use the same
    * vpnGatewayInterface ID in the peer GCP VPN gateway.
    */
  var peerGcpGateway: js.UndefOr[String] = js.native
  /**
    * IP address of the peer VPN gateway. Only IPv4 is supported.
    */
  var peerIp: js.UndefOr[String] = js.native
  /**
    * [Output Only] URL of the region where the VPN tunnel resides. You must
    * specify this field as part of the HTTP request URL. It is not settable as
    * a field in the request body.
    */
  var region: js.UndefOr[String] = js.native
  /**
    * Remote traffic selectors to use when establishing the VPN tunnel with the
    * peer VPN gateway. The value should be a CIDR formatted string, for
    * example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is
    * supported.
    */
  var remoteTrafficSelector: js.UndefOr[js.Array[String]] = js.native
  /**
    * URL of the router resource to be used for dynamic routing.
    */
  var router: js.UndefOr[String] = js.native
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * Shared secret used to set the secure session between the Cloud VPN
    * gateway and the peer VPN gateway.
    */
  var sharedSecret: js.UndefOr[String] = js.native
  /**
    * Hash of the shared secret.
    */
  var sharedSecretHash: js.UndefOr[String] = js.native
  /**
    * [Output Only] The status of the VPN tunnel, which can be one of the
    * following:  - PROVISIONING: Resource is being allocated for the VPN
    * tunnel.  - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related
    * configs from the user. Network, TargetVpnGateway, VpnTunnel,
    * ForwardingRule, and Route resources are needed to setup the VPN tunnel.
    * - FIRST_HANDSHAKE: Successful first handshake with the peer VPN.  -
    * ESTABLISHED: Secure session is successfully established with the peer
    * VPN.  - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS  -
    * AUTHORIZATION_ERROR: Auth error (for example, bad shared secret).  -
    * NEGOTIATION_FAILURE: Handshake failed.  - DEPROVISIONING: Resources are
    * being deallocated for the VPN tunnel.  - FAILED: Tunnel creation has
    * failed and the tunnel is not ready to be used.
    */
  var status: js.UndefOr[String] = js.native
  /**
    * URL of the Target VPN gateway with which this VPN tunnel is associated.
    * Provided by the client when the VPN tunnel is created.
    */
  var targetVpnGateway: js.UndefOr[String] = js.native
  /**
    * URL of the VPN gateway with which this VPN tunnel is associated. Provided
    * by the client when the VPN tunnel is created. This must be used (instead
    * of target_vpn_gateway) if a High Availability VPN gateway resource is
    * created.
    */
  var vpnGateway: js.UndefOr[String] = js.native
  /**
    * The interface ID of the VPN gateway with which this VPN tunnel is
    * associated.
    */
  var vpnGatewayInterface: js.UndefOr[Double] = js.native
}

object SchemaVpnTunnel {
  @scala.inline
  def apply(): SchemaVpnTunnel = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaVpnTunnel]
  }
  @scala.inline
  implicit class SchemaVpnTunnelOps[Self <: SchemaVpnTunnel] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withCreationTimestamp(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("creationTimestamp")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCreationTimestamp: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("creationTimestamp")(js.undefined)
        ret
    }
    @scala.inline
    def withDescription(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDescription: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(js.undefined)
        ret
    }
    @scala.inline
    def withDetailedStatus(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("detailedStatus")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDetailedStatus: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("detailedStatus")(js.undefined)
        ret
    }
    @scala.inline
    def withId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(js.undefined)
        ret
    }
    @scala.inline
    def withIkeVersion(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("ikeVersion")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutIkeVersion: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("ikeVersion")(js.undefined)
        ret
    }
    @scala.inline
    def withKind(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("kind")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutKind: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("kind")(js.undefined)
        ret
    }
    @scala.inline
    def withLabelFingerprint(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labelFingerprint")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLabelFingerprint: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labelFingerprint")(js.undefined)
        ret
    }
    @scala.inline
    def withLabels(value: StringDictionary[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLabels: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(js.undefined)
        ret
    }
    @scala.inline
    def withLocalTrafficSelector(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("localTrafficSelector")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLocalTrafficSelector: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("localTrafficSelector")(js.undefined)
        ret
    }
    @scala.inline
    def withName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(js.undefined)
        ret
    }
    @scala.inline
    def withPeerExternalGateway(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerExternalGateway")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPeerExternalGateway: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerExternalGateway")(js.undefined)
        ret
    }
    @scala.inline
    def withPeerExternalGatewayInterface(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerExternalGatewayInterface")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPeerExternalGatewayInterface: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerExternalGatewayInterface")(js.undefined)
        ret
    }
    @scala.inline
    def withPeerGcpGateway(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerGcpGateway")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPeerGcpGateway: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerGcpGateway")(js.undefined)
        ret
    }
    @scala.inline
    def withPeerIp(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerIp")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPeerIp: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerIp")(js.undefined)
        ret
    }
    @scala.inline
    def withRegion(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("region")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutRegion: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("region")(js.undefined)
        ret
    }
    @scala.inline
    def withRemoteTrafficSelector(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("remoteTrafficSelector")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutRemoteTrafficSelector: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("remoteTrafficSelector")(js.undefined)
        ret
    }
    @scala.inline
    def withRouter(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("router")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutRouter: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("router")(js.undefined)
        ret
    }
    @scala.inline
    def withSelfLink(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("selfLink")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSelfLink: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("selfLink")(js.undefined)
        ret
    }
    @scala.inline
    def withSharedSecret(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sharedSecret")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSharedSecret: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sharedSecret")(js.undefined)
        ret
    }
    @scala.inline
    def withSharedSecretHash(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sharedSecretHash")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSharedSecretHash: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sharedSecretHash")(js.undefined)
        ret
    }
    @scala.inline
    def withStatus(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("status")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutStatus: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("status")(js.undefined)
        ret
    }
    @scala.inline
    def withTargetVpnGateway(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("targetVpnGateway")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutTargetVpnGateway: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("targetVpnGateway")(js.undefined)
        ret
    }
    @scala.inline
    def withVpnGateway(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("vpnGateway")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutVpnGateway: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("vpnGateway")(js.undefined)
        ret
    }
    @scala.inline
    def withVpnGatewayInterface(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("vpnGatewayInterface")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutVpnGatewayInterface: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("vpnGatewayInterface")(js.undefined)
        ret
    }
  }
  
}

