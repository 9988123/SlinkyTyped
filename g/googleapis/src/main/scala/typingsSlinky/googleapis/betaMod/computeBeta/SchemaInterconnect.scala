package typingsSlinky.googleapis.betaMod.computeBeta

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * Represents an Interconnects resource. The Interconnects resource is a
  * dedicated connection between Google&#39;s network and your on-premises
  * network. For more information, see the  Dedicated overview page. (==
  * resource_for v1.interconnects ==) (== resource_for beta.interconnects ==)
  */
@js.native
trait SchemaInterconnect extends js.Object {
  /**
    * Administrative status of the interconnect. When this is set to true, the
    * Interconnect is functional and can carry traffic. When set to false, no
    * packets can be carried over the interconnect and no BGP routes are
    * exchanged over it. By default, the status is set to true.
    */
  var adminEnabled: js.UndefOr[Boolean] = js.native
  /**
    * [Output Only] A list of CircuitInfo objects, that describe the individual
    * circuits in this LAG.
    */
  var circuitInfos: js.UndefOr[js.Array[SchemaInterconnectCircuitInfo]] = js.native
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  /**
    * Customer name, to put in the Letter of Authorization as the party
    * authorized to request a crossconnect.
    */
  var customerName: js.UndefOr[String] = js.native
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * [Output Only] A list of outages expected for this Interconnect.
    */
  var expectedOutages: js.UndefOr[js.Array[SchemaInterconnectOutageNotification]] = js.native
  /**
    * [Output Only] IP address configured on the Google side of the
    * Interconnect link. This can be used only for ping tests.
    */
  var googleIpAddress: js.UndefOr[String] = js.native
  /**
    * [Output Only] Google reference ID to be used when raising support tickets
    * with Google or otherwise to debug backend connectivity issues.
    */
  var googleReferenceId: js.UndefOr[String] = js.native
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * [Output Only] A list of the URLs of all InterconnectAttachments
    * configured to use this Interconnect.
    */
  var interconnectAttachments: js.UndefOr[js.Array[String]] = js.native
  /**
    * Type of interconnect. Note that &quot;IT_PRIVATE&quot; has been
    * deprecated in favor of &quot;DEDICATED&quot;
    */
  var interconnectType: js.UndefOr[String] = js.native
  /**
    * [Output Only] Type of the resource. Always compute#interconnect for
    * interconnects.
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * A fingerprint for the labels being applied to this Interconnect, which is
    * essentially a hash of the labels set used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make a get() request to retrieve an Interconnect.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  /**
    * Labels to apply to this Interconnect resource. These can be later
    * modified by the setLabels method. Each label key/value must comply with
    * RFC1035. Label values may be empty.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * Type of link requested. This field indicates speed of each of the links
    * in the bundle, not the entire bundle.
    */
  var linkType: js.UndefOr[String] = js.native
  /**
    * URL of the InterconnectLocation object that represents where this
    * connection is to be provisioned.
    */
  var location: js.UndefOr[String] = js.native
  /**
    * Name of the resource. Provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * Email address to contact the customer NOC for operations and maintenance
    * notifications regarding this Interconnect. If specified, this will be
    * used for notifications in addition to all other forms described, such as
    * Stackdriver logs alerting and Cloud Notifications.
    */
  var nocContactEmail: js.UndefOr[String] = js.native
  /**
    * [Output Only] The current status of whether or not this Interconnect is
    * functional.
    */
  var operationalStatus: js.UndefOr[String] = js.native
  /**
    * [Output Only] IP address configured on the customer side of the
    * Interconnect link. The customer should configure this IP address during
    * turnup when prompted by Google NOC. This can be used only for ping tests.
    */
  var peerIpAddress: js.UndefOr[String] = js.native
  /**
    * [Output Only] Number of links actually provisioned in this interconnect.
    */
  var provisionedLinkCount: js.UndefOr[Double] = js.native
  /**
    * Target number of physical links in the link bundle, as requested by the
    * customer.
    */
  var requestedLinkCount: js.UndefOr[Double] = js.native
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * [Output Only] The current state of whether or not this Interconnect is
    * functional.
    */
  var state: js.UndefOr[String] = js.native
}

object SchemaInterconnect {
  @scala.inline
  def apply(): SchemaInterconnect = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaInterconnect]
  }
  @scala.inline
  implicit class SchemaInterconnectOps[Self <: SchemaInterconnect] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withAdminEnabled(value: Boolean): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("adminEnabled")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutAdminEnabled: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("adminEnabled")(js.undefined)
        ret
    }
    @scala.inline
    def withCircuitInfos(value: js.Array[SchemaInterconnectCircuitInfo]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("circuitInfos")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCircuitInfos: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("circuitInfos")(js.undefined)
        ret
    }
    @scala.inline
    def withCreationTimestamp(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("creationTimestamp")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCreationTimestamp: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("creationTimestamp")(js.undefined)
        ret
    }
    @scala.inline
    def withCustomerName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("customerName")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCustomerName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("customerName")(js.undefined)
        ret
    }
    @scala.inline
    def withDescription(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDescription: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(js.undefined)
        ret
    }
    @scala.inline
    def withExpectedOutages(value: js.Array[SchemaInterconnectOutageNotification]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("expectedOutages")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutExpectedOutages: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("expectedOutages")(js.undefined)
        ret
    }
    @scala.inline
    def withGoogleIpAddress(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("googleIpAddress")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutGoogleIpAddress: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("googleIpAddress")(js.undefined)
        ret
    }
    @scala.inline
    def withGoogleReferenceId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("googleReferenceId")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutGoogleReferenceId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("googleReferenceId")(js.undefined)
        ret
    }
    @scala.inline
    def withId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(js.undefined)
        ret
    }
    @scala.inline
    def withInterconnectAttachments(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("interconnectAttachments")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutInterconnectAttachments: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("interconnectAttachments")(js.undefined)
        ret
    }
    @scala.inline
    def withInterconnectType(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("interconnectType")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutInterconnectType: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("interconnectType")(js.undefined)
        ret
    }
    @scala.inline
    def withKind(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("kind")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutKind: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("kind")(js.undefined)
        ret
    }
    @scala.inline
    def withLabelFingerprint(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labelFingerprint")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLabelFingerprint: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labelFingerprint")(js.undefined)
        ret
    }
    @scala.inline
    def withLabels(value: StringDictionary[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLabels: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(js.undefined)
        ret
    }
    @scala.inline
    def withLinkType(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("linkType")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLinkType: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("linkType")(js.undefined)
        ret
    }
    @scala.inline
    def withLocation(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("location")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLocation: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("location")(js.undefined)
        ret
    }
    @scala.inline
    def withName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(js.undefined)
        ret
    }
    @scala.inline
    def withNocContactEmail(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("nocContactEmail")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutNocContactEmail: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("nocContactEmail")(js.undefined)
        ret
    }
    @scala.inline
    def withOperationalStatus(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("operationalStatus")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutOperationalStatus: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("operationalStatus")(js.undefined)
        ret
    }
    @scala.inline
    def withPeerIpAddress(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerIpAddress")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPeerIpAddress: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("peerIpAddress")(js.undefined)
        ret
    }
    @scala.inline
    def withProvisionedLinkCount(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("provisionedLinkCount")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutProvisionedLinkCount: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("provisionedLinkCount")(js.undefined)
        ret
    }
    @scala.inline
    def withRequestedLinkCount(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("requestedLinkCount")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutRequestedLinkCount: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("requestedLinkCount")(js.undefined)
        ret
    }
    @scala.inline
    def withSelfLink(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("selfLink")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSelfLink: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("selfLink")(js.undefined)
        ret
    }
    @scala.inline
    def withState(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("state")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutState: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("state")(js.undefined)
        ret
    }
  }
  
}

