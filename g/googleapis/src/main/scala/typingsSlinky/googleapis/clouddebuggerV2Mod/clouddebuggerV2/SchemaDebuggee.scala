package typingsSlinky.googleapis.clouddebuggerV2Mod.clouddebuggerV2

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * Represents the debugged application. The application may include one or
  * more replicated processes executing the same code. Each of these processes
  * is attached with a debugger agent, carrying out the debugging commands.
  * Agents attached to the same debuggee identify themselves as such by using
  * exactly the same Debuggee message value when registering.
  */
@js.native
trait SchemaDebuggee extends js.Object {
  /**
    * Version ID of the agent. Schema: `domain/language-platform/vmajor.minor`
    * (for example `google.com/java-gcp/v1.1`).
    */
  var agentVersion: js.UndefOr[String] = js.native
  /**
    * Human readable description of the debuggee. Including a human-readable
    * project name, environment name and version information is recommended.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * References to the locations and revisions of the source code used in the
    * deployed application.
    */
  var extSourceContexts: js.UndefOr[js.Array[SchemaExtendedSourceContext]] = js.native
  /**
    * Unique identifier for the debuggee generated by the controller service.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * If set to `true`, indicates that the agent should disable itself and
    * detach from the debuggee.
    */
  var isDisabled: js.UndefOr[Boolean] = js.native
  /**
    * If set to `true`, indicates that Controller service does not detect any
    * activity from the debuggee agents and the application is possibly
    * stopped.
    */
  var isInactive: js.UndefOr[Boolean] = js.native
  /**
    * A set of custom debuggee properties, populated by the agent, to be
    * displayed to the user.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * Project the debuggee is associated with. Use project number or id when
    * registering a Google Cloud Platform project.
    */
  var project: js.UndefOr[String] = js.native
  /**
    * References to the locations and revisions of the source code used in the
    * deployed application.
    */
  var sourceContexts: js.UndefOr[js.Array[SchemaSourceContext]] = js.native
  /**
    * Human readable message to be displayed to the user about this debuggee.
    * Absence of this field indicates no status. The message can be either
    * informational or an error status.
    */
  var status: js.UndefOr[SchemaStatusMessage] = js.native
  /**
    * Uniquifier to further distinguish the application. It is possible that
    * different applications might have identical values in the debuggee
    * message, thus, incorrectly identified as a single application by the
    * Controller service. This field adds salt to further distinguish the
    * application. Agents should consider seeding this field with value that
    * identifies the code, binary, configuration and environment.
    */
  var uniquifier: js.UndefOr[String] = js.native
}

object SchemaDebuggee {
  @scala.inline
  def apply(): SchemaDebuggee = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaDebuggee]
  }
  @scala.inline
  implicit class SchemaDebuggeeOps[Self <: SchemaDebuggee] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withAgentVersion(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("agentVersion")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutAgentVersion: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("agentVersion")(js.undefined)
        ret
    }
    @scala.inline
    def withDescription(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDescription: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("description")(js.undefined)
        ret
    }
    @scala.inline
    def withExtSourceContexts(value: js.Array[SchemaExtendedSourceContext]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("extSourceContexts")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutExtSourceContexts: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("extSourceContexts")(js.undefined)
        ret
    }
    @scala.inline
    def withId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(js.undefined)
        ret
    }
    @scala.inline
    def withIsDisabled(value: Boolean): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("isDisabled")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutIsDisabled: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("isDisabled")(js.undefined)
        ret
    }
    @scala.inline
    def withIsInactive(value: Boolean): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("isInactive")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutIsInactive: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("isInactive")(js.undefined)
        ret
    }
    @scala.inline
    def withLabels(value: StringDictionary[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutLabels: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("labels")(js.undefined)
        ret
    }
    @scala.inline
    def withProject(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("project")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutProject: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("project")(js.undefined)
        ret
    }
    @scala.inline
    def withSourceContexts(value: js.Array[SchemaSourceContext]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sourceContexts")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSourceContexts: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("sourceContexts")(js.undefined)
        ret
    }
    @scala.inline
    def withStatus(value: SchemaStatusMessage): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("status")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutStatus: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("status")(js.undefined)
        ret
    }
    @scala.inline
    def withUniquifier(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("uniquifier")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutUniquifier: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("uniquifier")(js.undefined)
        ret
    }
  }
  
}

