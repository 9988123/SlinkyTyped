package typingsSlinky.gapiClientAppengine.gapi.client.appengine

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait AuthorizedCertificate extends js.Object {
  /** The SSL certificate serving the AuthorizedCertificate resource. This must be obtained independently from a certificate authority. */
  var certificateRawData: js.UndefOr[CertificateRawData] = js.native
  /** The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate. */
  var displayName: js.UndefOr[String] = js.native
  /**
    * Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not
    * have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
    */
  var domainMappingsCount: js.UndefOr[Double] = js.native
  /** Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly */
  var domainNames: js.UndefOr[js.Array[String]] = js.native
  /**
    * The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time
    * using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly
    */
  var expireTime: js.UndefOr[String] = js.native
  /** Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly */
  var id: js.UndefOr[String] = js.native
  /** Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly */
  var name: js.UndefOr[String] = js.native
  /**
    * The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not
    * represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate
    * mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE
    * option.@OutputOnly
    */
  var visibleDomainMappings: js.UndefOr[js.Array[String]] = js.native
}

object AuthorizedCertificate {
  @scala.inline
  def apply(): AuthorizedCertificate = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[AuthorizedCertificate]
  }
  @scala.inline
  implicit class AuthorizedCertificateOps[Self <: AuthorizedCertificate] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withCertificateRawData(value: CertificateRawData): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("certificateRawData")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCertificateRawData: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("certificateRawData")(js.undefined)
        ret
    }
    @scala.inline
    def withDisplayName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("displayName")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDisplayName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("displayName")(js.undefined)
        ret
    }
    @scala.inline
    def withDomainMappingsCount(value: Double): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("domainMappingsCount")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDomainMappingsCount: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("domainMappingsCount")(js.undefined)
        ret
    }
    @scala.inline
    def withDomainNames(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("domainNames")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDomainNames: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("domainNames")(js.undefined)
        ret
    }
    @scala.inline
    def withExpireTime(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("expireTime")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutExpireTime: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("expireTime")(js.undefined)
        ret
    }
    @scala.inline
    def withId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("id")(js.undefined)
        ret
    }
    @scala.inline
    def withName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("name")(js.undefined)
        ret
    }
    @scala.inline
    def withVisibleDomainMappings(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("visibleDomainMappings")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutVisibleDomainMappings: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("visibleDomainMappings")(js.undefined)
        ret
    }
  }
  
}

