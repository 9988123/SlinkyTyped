package typingsSlinky.gapiClientReseller.gapi.client.reseller

import typingsSlinky.gapiClientReseller.AnonCommitmentInterval
import typingsSlinky.gapiClientReseller.AnonIsInTrial
import typingsSlinky.gapiClientReseller.AnonMinimumTransferableSeats
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait Subscription extends js.Object {
  /** Read-only field that returns the current billing method for a subscription. */
  var billingMethod: js.UndefOr[String] = js.native
  /** The creationTime property is the date when subscription was created. It is in milliseconds using the Epoch format. See an example Epoch converter. */
  var creationTime: js.UndefOr[String] = js.native
  /** Primary domain name of the customer */
  var customerDomain: js.UndefOr[String] = js.native
  /**
    * This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary
    * domain or the unique identifier generated by Google.
    */
  var customerId: js.UndefOr[String] = js.native
  /**
    * Google-issued code (100 char max) for discounted pricing on subscription plans. Deal code must be included in insert requests in order to receive
    * discounted rate. This property is optional, regular pricing applies if left empty.
    */
  var dealCode: js.UndefOr[String] = js.native
  /** Identifies the resource as a Subscription. Value: reseller#subscription */
  var kind: js.UndefOr[String] = js.native
  /**
    * The plan property is required. In this version of the API, the G Suite plans are the flexible plan, annual commitment plan, and the 30-day free trial
    * plan. For more information about the API"s payment plans, see the API concepts.
    */
  var plan: js.UndefOr[AnonCommitmentInterval] = js.native
  /**
    * This is an optional property. This purchase order (PO) information is for resellers to use for their company tracking usage. If a purchaseOrderId value
    * is given it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters.
    */
  var purchaseOrderId: js.UndefOr[String] = js.native
  /** Renewal settings for the annual commitment plan. For more detailed information, see renewal options in the administrator help center. */
  var renewalSettings: js.UndefOr[RenewalSettings] = js.native
  /**
    * URL to customer's Subscriptions page in the Admin console. The read-only URL is generated by the API service. This is used if your client application
    * requires the customer to complete a task using the Subscriptions page in the Admin console.
    */
  var resourceUiUrl: js.UndefOr[String] = js.native
  /** This is a required property. The number and limit of user seat licenses in the plan. */
  var seats: js.UndefOr[Seats] = js.native
  /**
    * A required property. The skuId is a unique system identifier for a product's SKU assigned to a customer in the subscription. For products and SKUs
    * available in this version of the API, see  Product and SKU IDs.
    */
  var skuId: js.UndefOr[String] = js.native
  /**
    * Read-only external display name for a product's SKU assigned to a customer in the subscription. SKU names are subject to change at Google's discretion.
    * For products and SKUs available in this version of the API, see  Product and SKU IDs.
    */
  var skuName: js.UndefOr[String] = js.native
  /** This is an optional property. */
  var status: js.UndefOr[String] = js.native
  /**
    * The subscriptionId is the subscription identifier and is unique for each customer. This is a required property. Since a subscriptionId changes when a
    * subscription is updated, we recommend not using this ID as a key for persistent data. Use the subscriptionId as described in retrieve all reseller
    * subscriptions.
    */
  var subscriptionId: js.UndefOr[String] = js.native
  /**
    * Read-only field containing an enumerable of all the current suspension reasons for a subscription. It is possible for a subscription to have many
    * concurrent, overlapping suspension reasons. A subscription's STATUS is SUSPENDED until all pending suspensions are removed.
    *
    * Possible options include:
    * - PENDING_TOS_ACCEPTANCE - The customer has not logged in and accepted the G Suite Resold Terms of Services.
    * - RENEWAL_WITH_TYPE_CANCEL - The customer's commitment ended and their service was cancelled at the end of their term.
    * - RESELLER_INITIATED - A manual suspension invoked by a Reseller.
    * - TRIAL_ENDED - The customer's trial expired without a plan selected.
    * - OTHER - The customer is suspended for an internal Google reason (e.g. abuse or otherwise).
    */
  var suspensionReasons: js.UndefOr[js.Array[String]] = js.native
  /** Read-only transfer related information for the subscription. For more information, see retrieve transferable subscriptions for a customer. */
  var transferInfo: js.UndefOr[AnonMinimumTransferableSeats] = js.native
  /** The G Suite annual commitment and flexible payment plans can be in a 30-day free trial. For more information, see the API concepts. */
  var trialSettings: js.UndefOr[AnonIsInTrial] = js.native
}

object Subscription {
  @scala.inline
  def apply(): Subscription = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Subscription]
  }
  @scala.inline
  implicit class SubscriptionOps[Self <: Subscription] (val x: Self) extends AnyVal {
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    @scala.inline
    def withBillingMethod(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("billingMethod")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutBillingMethod: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("billingMethod")(js.undefined)
        ret
    }
    @scala.inline
    def withCreationTime(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("creationTime")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCreationTime: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("creationTime")(js.undefined)
        ret
    }
    @scala.inline
    def withCustomerDomain(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("customerDomain")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCustomerDomain: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("customerDomain")(js.undefined)
        ret
    }
    @scala.inline
    def withCustomerId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("customerId")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCustomerId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("customerId")(js.undefined)
        ret
    }
    @scala.inline
    def withDealCode(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("dealCode")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutDealCode: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("dealCode")(js.undefined)
        ret
    }
    @scala.inline
    def withKind(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("kind")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutKind: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("kind")(js.undefined)
        ret
    }
    @scala.inline
    def withPlan(value: AnonCommitmentInterval): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("plan")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPlan: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("plan")(js.undefined)
        ret
    }
    @scala.inline
    def withPurchaseOrderId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("purchaseOrderId")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutPurchaseOrderId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("purchaseOrderId")(js.undefined)
        ret
    }
    @scala.inline
    def withRenewalSettings(value: RenewalSettings): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("renewalSettings")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutRenewalSettings: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("renewalSettings")(js.undefined)
        ret
    }
    @scala.inline
    def withResourceUiUrl(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("resourceUiUrl")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutResourceUiUrl: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("resourceUiUrl")(js.undefined)
        ret
    }
    @scala.inline
    def withSeats(value: Seats): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("seats")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSeats: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("seats")(js.undefined)
        ret
    }
    @scala.inline
    def withSkuId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("skuId")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSkuId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("skuId")(js.undefined)
        ret
    }
    @scala.inline
    def withSkuName(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("skuName")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSkuName: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("skuName")(js.undefined)
        ret
    }
    @scala.inline
    def withStatus(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("status")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutStatus: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("status")(js.undefined)
        ret
    }
    @scala.inline
    def withSubscriptionId(value: String): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("subscriptionId")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSubscriptionId: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("subscriptionId")(js.undefined)
        ret
    }
    @scala.inline
    def withSuspensionReasons(value: js.Array[String]): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("suspensionReasons")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSuspensionReasons: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("suspensionReasons")(js.undefined)
        ret
    }
    @scala.inline
    def withTransferInfo(value: AnonMinimumTransferableSeats): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("transferInfo")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutTransferInfo: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("transferInfo")(js.undefined)
        ret
    }
    @scala.inline
    def withTrialSettings(value: AnonIsInTrial): Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("trialSettings")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutTrialSettings: Self = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("trialSettings")(js.undefined)
        ret
    }
  }
  
}

