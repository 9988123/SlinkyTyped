package typingsSlinky.fastifyRateLimit.mod

import typingsSlinky.ioredis.mod.Redis
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait FastifyRateLimitOptions[T] extends js.Object {
  /**
    * This plugin internally uses a lru cache to handle the clients, you can
    * change the size of the cache with this option.
    *
    * default: 5000
    */
  var cache: js.UndefOr[Double] = js.native
  /**
    * Function to generate a unique identifier for each incoming request.
    *
    * default: (req) => req.ip
    */
  var keyGenerator: js.UndefOr[js.Function1[/* req */ T, String]] = js.native
  /**
    * Is the maximum number of requests a single client can perform inside a
    * timeWindow.
    *
    * default: 1000
    */
  var max: js.UndefOr[Double] = js.native
  /**
    * By default this plugins uses an in-memory store, which is fast but if
    * you application works on more than one server it is useless, since the
    * data is store locally. You can pass a Redis client here and magically
    * the issue is solved. To achieve the maximum speed, this plugins requires
    * the use of ioredis.
    *
    * default: null
    */
  var redis: js.UndefOr[Redis] = js.native
  /**
    * If `true` it will skip errors generated by the storage (eg, redis not
    * reachable).
    *
    * default: false
    */
  var skipOnError: js.UndefOr[Boolean] = js.native
  /**
    * The duration of the time window, can be expressed in milliseconds (as a
    * number) or as a string, see ms too see the supported formats
    *
    * default: 1000 * 60
    */
  var timeWindow: js.UndefOr[Double] = js.native
  /**
    * Array of string of ips to exclude from rate limiting.
    *
    * default: []
    */
  var whitelist: js.UndefOr[js.Array[String]] = js.native
}

object FastifyRateLimitOptions {
  @scala.inline
  def apply[T](): FastifyRateLimitOptions[T] = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[FastifyRateLimitOptions[T]]
  }
  @scala.inline
  implicit class FastifyRateLimitOptionsOps[Self[t] <: FastifyRateLimitOptions[t], T] (val x: Self[T]) extends AnyVal {
    @scala.inline
    def duplicate: Self[T] = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self[T]]
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self[T] with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self[T] with Other]
    @scala.inline
    def withCache(value: Double): Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("cache")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutCache: Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("cache")(js.undefined)
        ret
    }
    @scala.inline
    def withKeyGenerator(value: /* req */ T => String): Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("keyGenerator")(js.Any.fromFunction1(value))
        ret
    }
    @scala.inline
    def withoutKeyGenerator: Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("keyGenerator")(js.undefined)
        ret
    }
    @scala.inline
    def withMax(value: Double): Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("max")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutMax: Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("max")(js.undefined)
        ret
    }
    @scala.inline
    def withRedis(value: Redis): Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("redis")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutRedis: Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("redis")(js.undefined)
        ret
    }
    @scala.inline
    def withSkipOnError(value: Boolean): Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("skipOnError")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutSkipOnError: Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("skipOnError")(js.undefined)
        ret
    }
    @scala.inline
    def withTimeWindow(value: Double): Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("timeWindow")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutTimeWindow: Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("timeWindow")(js.undefined)
        ret
    }
    @scala.inline
    def withWhitelist(value: js.Array[String]): Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("whitelist")(value.asInstanceOf[js.Any])
        ret
    }
    @scala.inline
    def withoutWhitelist: Self[T] = {
        val ret = this.duplicate
        ret.asInstanceOf[js.Dynamic].updateDynamic("whitelist")(js.undefined)
        ret
    }
  }
  
}

